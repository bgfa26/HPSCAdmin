 /****** 
    PROCEDIMIENTO PARA AGREGAR EMPLEADOS A LA BASE DE DATOS (NO POSEEN NINGUN ROL) 
    FECHA: 20/06/2019 11:00 AM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[CREATE_EMPLOYEE]
  @id AS int,
  @workerid AS varchar (20),
  @firstname AS varchar (50),
  @lastname AS varchar (50),
  @email AS varchar (120),
  @password AS varchar (50),
  @exitvalue AS int OUTPUT
AS
BEGIN
  IF ((SELECT COUNT(*) FROM EMPLOYEE WHERE ID = @id) = 0)
    IF ((SELECT COUNT(*) FROM EMPLOYEE WHERE WORKERID = @workerid) = 0)
      IF ((SELECT COUNT(*) FROM EMPLOYEE WHERE EMAIL = @email) = 0)
        BEGIN
          INSERT INTO EMPLOYEE VALUES(@id, @workerid, @firstname, @lastname, @email, @password, 1);
          INSERT INTO ASSIGNMENT(FK_POSITION, FK_ORGANIZATIONALUNIT, FK_EMPLOYEE) VALUES (1, 1, @id);
          set @exitvalue = 200;
          RETURN @exitvalue;
        END;
      ELSE
        BEGIN
          set @exitvalue = 103;
          RETURN @exitvalue;
        END;
    ELSE
      BEGIN
        set @exitvalue = 102;
        RETURN @exitvalue;  
      END;
  ELSE
    BEGIN
      set @exitvalue = 101;
      RETURN @exitvalue; 
    END;
END


/****** 
    PROCEDIMIENTO PARA CONSULTAR EMPLEADOS MEDIANTE UN CORREO
    FECHA: 24/06/2019 12:39 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[CONSULT_EMPLOYEE_EMAIL]
  @email AS varchar(350)
AS
BEGIN
  SELECT E.ID AS ID, E.WORKERID AS WORKERID, E.FIRSTNAME AS FIRSTNAME, E.LASTNAME AS LASTNAME, E.EMAIL AS EMAIL, E.PASSWORD AS PASSWORD, E.STATUS AS STATUS, P.ID AS POSITIONID, P.NAME AS POSITIONNAME, OU.ID AS OUID, OU.NAME AS OUNAME
  FROM EMPLOYEE E, ASSIGNMENT A, POSITION P, ORGANIZATIONAL_UNIT OU 
  WHERE E.EMAIL = @email AND A.FK_EMPLOYEE = E.ID AND A.FK_POSITION = P.ID AND A.FK_ORGANIZATIONALUNIT = OU.ID;
END


/****** 
    PROCEDIMIENTO PARA CONSULTAR EMPLEADOS MEDIANTE UN CORREO SIN IMPORTAR SI POSEEN UN CARGO ASIGNADO
    FECHA: 26/06/2019 6:50 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[CONSULT_EMPLOYEE_EMAIL_NO_POSITION]
  @email AS varchar(350)
AS
BEGIN  
  SELECT E.ID AS ID, E.WORKERID AS WORKERID, E.FIRSTNAME AS FIRSTNAME, E.LASTNAME AS LASTNAME, E.EMAIL AS EMAIL, E.PASSWORD AS PASSWORD, E.STATUS AS STATUS, A.FK_ORGANIZATIONALUNIT AS OUID, A.FK_POSITION AS PID
  FROM EMPLOYEE E, ASSIGNMENT A
  WHERE E.EMAIL = @email AND A.FK_EMPLOYEE = E.ID;
END

/****** 
		PROCEDIMIENTO PARA CAMBIAR EL PWD DE UN EMPLEADO DE LA BASE DE DATOS POR CORREO
		FECHA: 25/06/2019 12:03 AM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[CHANGE_PASSWORD]
  @email AS varchar(120),
  @password AS varchar(50),
  @exitvalue AS int OUTPUT
AS
BEGIN
  UPDATE [dbo].[EMPLOYEE] SET [PASSWORD] = @password WHERE [EMAIL] = @email;
  set @exitvalue = 200;
  RETURN @exitvalue;
END

/****** 
		PROCEDIMIENTO PARA CONSULTAR TODOS LOS EMPLEADOS DE LA BASE DE DATOS
		FECHA: 25/06/2019 10:24 AM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GET_ALL_EMPLOYEES]
AS
BEGIN
	SELECT E.ID AS ID, E.WORKERID AS WORKERID, E.FIRSTNAME AS FIRSTNAME, E.LASTNAME AS LASTNAME, E.EMAIL AS EMAIL, E.STATUS AS STATUS, P.ID AS PID, P.NAME POSITIONNAME, OU.ID AS OUID, OU.NAME OUNAME 
	FROM EMPLOYEE E, ASSIGNMENT A, POSITION P, ORGANIZATIONAL_UNIT OU
	WHERE A.FK_EMPLOYEE = E.ID AND A.FK_POSITION = P.ID AND A.FK_ORGANIZATIONALUNIT = OU.ID;
END

/****** 
		PROCEDIMIENTO PARA ASIGNAR CARGO Y UNIDAD ORGANIZACIONAL A UN EMPLEADO DE LA BASE DE DATOS
		FECHA: 25/06/2019 10:30 AM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[UPDATE_POSITION_EMPLOYEE]
  @id AS int,
  @idposition AS int,
  @idou AS int,
  @exitvalue AS int OUTPUT
AS
BEGIN
	IF ((SELECT COUNT(*) FROM EMPLOYEE WHERE ID = @id) = 1)
    BEGIN
  		UPDATE [dbo].[ASSIGNMENT] SET FK_POSITION = @idposition, FK_ORGANIZATIONALUNIT = @idou WHERE FK_EMPLOYEE = @id;
      set @exitvalue = 200;
  		RETURN @exitvalue;
    END;
	ELSE
    BEGIN
      set @exitvalue = 100;
      RETURN @exitvalue;
    END;
END

/****** 
    PROCEDIMIENTO PARA ELIMINAR UN EMPLEADO DE LA BASE DE DATOS
    FECHA: 25/06/2019 5:15 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[DELETE_EMPLOYEE]
  @id AS varchar(120)
AS
BEGIN
  UPDATE [dbo].[EMPLOYEE] SET [STATUS] = 0 WHERE [ID] = @id;
END

/****** 
    PROCEDIMIENTO PARA VALIDAR EMPLEADOS DE LA BASE DE DATOS
    FECHA: 25/06/2019 10:45 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[VALIDATE_ID_EMAIL]
  @id AS int,
  @workerid AS varchar (20),
  @email AS varchar (120),
  @exitvalue AS int OUTPUT
AS
BEGIN
  IF ((SELECT COUNT(*) FROM EMPLOYEE WHERE ID = @id) = 0)
    IF ((SELECT COUNT(*) FROM EMPLOYEE WHERE WORKERID = @workerid) = 0)
      IF ((SELECT COUNT(*) FROM EMPLOYEE WHERE EMAIL = @email) = 0)
        BEGIN
          set @exitvalue = 200;
          RETURN @exitvalue;
        END;
      ELSE
        BEGIN
          set @exitvalue = 103;
          RETURN @exitvalue;
        END;
    ELSE
      BEGIN
        set @exitvalue = 102;
        RETURN @exitvalue;  
      END;
  ELSE
    BEGIN
      set @exitvalue = 101;
      RETURN @exitvalue; 
    END;
END

/****** 
    PROCEDIMIENTO PARA AGREGAR CURSOS/CUENTAS/PERMISOS A LA BASE DE DATOS
    FECHA: 25/06/2019 06:29 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[CREATE_ACCOUNT_COURSE_PERMIT]
  @id AS varchar(30),
  @name AS varchar (100),
  @type AS int,
  @initdate AS date,
  @enddate AS date,
  @fk_employee AS int,
  @exitvalue AS int OUTPUT
AS
BEGIN
  IF ((SELECT COUNT(*) FROM ACCOUNT_COURSE_PERMIT WHERE ID = @id) = 0)
    BEGIN
      INSERT INTO ACCOUNT_COURSE_PERMIT VALUES(@id, @name, @type, @initdate, @enddate, 1, @fk_employee);
      INSERT INTO COST_CENTER(FK_ORGANIZATIONALUNIT, FK_ACCOUNTCOURSEPERMIT) VALUES((SELECT ID FROM ORGANIZATIONAL_UNIT WHERE NAME='Directiva'), @id);
      set @exitvalue = 200;
      RETURN @exitvalue;
    END;
  ELSE
    BEGIN
      set @exitvalue = 100;
      RETURN @exitvalue;  
    END;
END

/****** 
    PROCEDIMIENTO PARA AGREGAR UN CENTRO DE COSTO A LA BASE DE DATOS
    FECHA: 26/06/2019 04:19 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[CREATE_COST_CENTER]
  @fk_ou AS int,
  @fk_acp AS varchar (30),
  @exitvalue AS int OUTPUT
AS
BEGIN
  IF ((SELECT COUNT(*) FROM COST_CENTER WHERE (FK_ORGANIZATIONALUNIT = @fk_ou) AND (FK_ACCOUNTCOURSEPERMIT = @fk_acp)) = 0)
    BEGIN
      INSERT INTO COST_CENTER(FK_ORGANIZATIONALUNIT, FK_ACCOUNTCOURSEPERMIT) VALUES(@fk_ou, @fk_acp);
      set @exitvalue = 200;
      RETURN @exitvalue;
    END;
  ELSE
    BEGIN
      set @exitvalue = 100;
      RETURN @exitvalue;  
    END;  
END

/****** 
    PROCEDIMIENTO PARA CONSULTAR TODAS LAS CUENTAS/CURSOS/PERMISOS DE LA BASE DE DATOS
    FECHA: 25/06/2019 10:24 AM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GET_ALL_ACCOUNTS_COURSES_PERMITS]
AS
BEGIN
  SELECT ACP.ID AS ACPID, ACP.NAME AS NAME, ACP.TYPE AS TYPE, ACP.INITDATE AS INITDATE, ACP.ENDDATE AS ENDDATE, ACP.STATUS AS STATUS, OU.ID AS OUID, OU.NAME AS OUNAME, E.ID AS EID, E.FIRSTNAME AS EFIRSTNAME, E.LASTNAME AS ELASTNAME
  FROM ACCOUNT_COURSE_PERMIT ACP, COST_CENTER CC, ORGANIZATIONAL_UNIT OU, EMPLOYEE E
  WHERE CC.FK_ORGANIZATIONALUNIT = OU.ID AND CC.FK_ACCOUNTCOURSEPERMIT = ACP.ID AND ACP.FK_EMPLOYEE = E.ID;
END

/****** 
    PROCEDIMIENTO PARA CONSULTAR UNA CUENTA/CURSO/PERMISO DE LA BASE DE DATOS
    FECHA: 25/06/2019 10:24 AM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GET_ACCOUNT_COURSE_PERMIT]
  @id AS varchar(30)
AS
BEGIN
  SELECT ACP.ID AS ACPID, ACP.NAME AS NAME, ACP.TYPE AS TYPE, ACP.INITDATE AS INITDATE, ACP.ENDDATE AS ENDDATE, ACP.STATUS AS STATUS, OU.ID AS OUID, OU.NAME AS OUNAME, E.ID AS EID, E.FIRSTNAME AS EFIRSTNAME, E.LASTNAME AS ELASTNAME
  FROM ACCOUNT_COURSE_PERMIT ACP, COST_CENTER CC, ORGANIZATIONAL_UNIT OU, EMPLOYEE E
  WHERE CC.FK_ORGANIZATIONALUNIT = OU.ID AND CC.FK_ACCOUNTCOURSEPERMIT = ACP.ID AND ACP.FK_EMPLOYEE = E.ID AND ACP.ID = @id;
END

/****** 
		PROCEDIMIENTO PARA MODIFICAR CUENTAS/CURSOS/PERMISOS DE LA BASE DE DATOS
		FECHA: 27/06/2019 04:13 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[UPDATE_ACCOUNT_COURSE_PERMIT]
  @id AS varchar(100),
  @name AS varchar(100),
  @type AS int,
  @initdate AS date,
  @enddate AS date,
  @fk_employee AS int,
  @exitvalue AS int OUTPUT
AS
BEGIN
	IF ((SELECT COUNT(*) FROM ACCOUNT_COURSE_PERMIT WHERE ID = @id) = 1)
    	BEGIN 
	  		UPDATE [dbo].[ACCOUNT_COURSE_PERMIT] SET NAME = @name, TYPE = @type, INITDATE = @initdate, ENDDATE = @enddate, FK_EMPLOYEE = @fk_employee WHERE ID = @id;
        INSERT INTO COST_CENTER(FK_ORGANIZATIONALUNIT, FK_ACCOUNTCOURSEPERMIT) VALUES((SELECT ID FROM ORGANIZATIONAL_UNIT WHERE NAME='Directiva'), @id);
	      set @exitvalue = 200;
	  		RETURN @exitvalue;
     	END;
	ELSE
	    BEGIN
		    set @exitvalue = 100;
		    RETURN @exitvalue;
	    END;
END

/****** 
    PROCEDIMIENTO PARA ELIMINAR UNA CUENTA CURSO O PERMISO DE LA BASE DE DATOS
    FECHA: 14/07/2019 8:04 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[DELETE_ACCOUNT_COURSE_PERMIT]
  @id AS varchar(30),
  @exitvalue AS int OUTPUT
AS
BEGIN
	IF ((SELECT COUNT(*) FROM WORKLOAD WHERE FK_ACCOUNTCOURSEPERMIT = @id) = 0)
       	BEGIN
       	  	DELETE FROM [dbo].[ACCOUNT_COURSE_PERMIT] WHERE ID = @id;
  	   	END;
  	ELSE
  	   	BEGIN
	  	   	UPDATE [dbo].[ACCOUNT_COURSE_PERMIT] SET [STATUS] = 0 WHERE [ID] = @id;
  	  		set @exitvalue = 200;
  		  	RETURN @exitvalue;
  	   	END;
END


/****** 
    PROCEDIMIENTO PARA ELIMINAR UN CENTRO DE COSTO DE LA BASE DE DATOS
    FECHA: 27/06/2019 5:09 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[DELETE_COST_CENTER]
  @id AS varchar (30)
AS
BEGIN
  DELETE FROM [dbo].[COST_CENTER] WHERE FK_ACCOUNTCOURSEPERMIT = @id;
END


/****** 
		PROCEDIMIENTO PARA MOSTRAR LAS CUENTAS/CURSOS/PERMISOS QUE UTILIZAN MAS TIEMPO
		FECHA: 01/07/2019 10:20 AM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GET_ALL_ACCOUNTS_COURSES_PERMITS_BY_MONTH]
  @month AS int,
  @year AS int
AS
BEGIN 
  SELECT ACP.ID AS ID, ACP.NAME AS NAME, ACP.TYPE AS TYPE, ACP.STATUS AS STATUS, W.ID AS ID, W.DAY1 AS DAY1, W.DAY2 AS DAY2, W.DAY3 AS DAY3, W.DAY4 AS DAY4, W.DAY5 AS DAY5, W.DAY6 AS DAY6, W.DAY7 AS DAY7, W.DAY8 AS DAY8, W.DAY9 AS DAY9, W.DAY10 AS DAY10, W.DAY11 AS DAY11, W.DAY12 AS DAY12, W.DAY13 AS DAY13, W.DAY14 AS DAY14, W.DAY15 AS DAY15, W.DAY16 AS DAY16
  FROM TIMESHEET T, WORKLOAD W, ACCOUNT_COURSE_PERMIT ACP
  WHERE (SELECT MONTH(T.INITDATE) AS INITDATEMONTH) = @month AND (SELECT YEAR(T.INITDATE) AS INITDATEYEAR) = @year AND
       W.FK_TIMESHEET = T.ID AND W.FK_ACCOUNTCOURSEPERMIT = ACP.ID;
END

/****** 
		PROCEDIMIENTO PARA MOSTRAR EL PROMEDIO DE HORAS TRABAJADAS POR DIA DE LA SEMANA
		FECHA: 01/07/2019 09:40 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GET_TOTAL_HOUR_PER_DAY]
  @month AS int,
  @year AS int
AS
BEGIN
  SELECT T.INITDATE AS INITDATE, T.ENDDATE AS ENDDATE, W.ID AS ID, W.DAY1 AS DAY1, W.DAY2 AS DAY2, W.DAY3 AS DAY3, W.DAY4 AS DAY4, W.DAY5 AS DAY5, W.DAY6 AS DAY6, W.DAY7 AS DAY7, W.DAY8 AS DAY8, W.DAY9 AS DAY9, W.DAY10 AS DAY10, W.DAY11 AS DAY11, W.DAY12 AS DAY12, W.DAY13 AS DAY13, W.DAY14 AS DAY14, W.DAY15 AS DAY15, W.DAY16
  FROM TIMESHEET T, WORKLOAD W
	WHERE (SELECT MONTH(T.INITDATE) AS INITDATEMONTH) = @month AND (SELECT YEAR(T.INITDATE) AS INITDATEYEAR) = @year AND
      W.FK_TIMESHEET = T.ID;
END

/****** 
		PROCEDIMIENTO PARA MOSTRAR LA CANTIDAD DE HORAS LABORALES POR CARGO
		FECHA: 01/07/2019 09:47 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GET_TOTAL_HOURS_PER_ORGANIZATIONAL_UNIT]
  @month AS int,
  @year AS int
AS
BEGIN
  SELECT OU.NAME AS OUNAME, W.ID AS ID, W.DAY1 AS DAY1, W.DAY2 AS DAY2, W.DAY3 AS DAY3, W.DAY4 AS DAY4, W.DAY5 AS DAY5, W.DAY6 AS DAY6, W.DAY7 AS DAY7, W.DAY8 AS DAY8, W.DAY9 AS DAY9, W.DAY10 AS DAY10, W.DAY11 AS DAY11, W.DAY12 AS DAY12, W.DAY13 AS DAY13, W.DAY14 AS DAY14, W.DAY15 AS DAY15, W.DAY16
  FROM TIMESHEET T, WORKLOAD W, EMPLOYEE E, ASSIGNMENT A, ORGANIZATIONAL_UNIT OU, ACCOUNT_COURSE_PERMIT ACP
  WHERE (SELECT MONTH(T.INITDATE) AS INITDATEMONTH) = @month AND (SELECT YEAR(T.INITDATE) AS INITDATEYEAR) = @year AND
      W.FK_TIMESHEET = T.ID AND W.FK_ACCOUNTCOURSEPERMIT = ACP.ID AND T.FK_EMPLOYEE = E.ID AND A.FK_EMPLOYEE = E.ID AND A.FK_ORGANIZATIONALUNIT = OU.ID;
END

/****** 
    PROCEDIMIENTO PARA CONSULTAR LAS HOJAS DE TIEMPO DE LOS MESES ANUALMENTE
    FECHA: 12/08/2019 07:23 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GET_YEARS_BY_MONTH]
  @month AS int
AS
BEGIN
  SELECT YEAR(T.INITDATE) AS YEAR
  FROM TIMESHEET T
  WHERE (SELECT MONTH(T.INITDATE) AS MONTH) = @month;
END


/****** 
    PROCEDIMIENTO PARA CONSULTAR LAS HOJAS DE TIEMPO DE LOS MESES ANUALMENTE
    FECHA: 12/08/2019 07:23 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GET_ALL_YEARS]
AS
BEGIN
  SELECT YEAR(T.INITDATE) AS YEAR
  FROM TIMESHEET T
END

/****** 
		PROCEDIMIENTO PARA MOSTRAR LAS HORAS TRABAJADAS ANUALMENTE
		FECHA: 01/07/2019 3:30 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GET_TOTAL_HOURS_BY_MONTH]
  @year AS int
AS
BEGIN
	SELECT W.ID AS ID, W.DAY1 AS DAY1, W.DAY2 AS DAY2, W.DAY3 AS DAY3, W.DAY4 AS DAY4, W.DAY5 AS DAY5, W.DAY6 AS DAY6, W.DAY7 AS DAY7, W.DAY8 AS DAY8, W.DAY9 AS DAY9, W.DAY10 AS DAY10, W.DAY11 AS DAY11, W.DAY12 AS DAY12, W.DAY13 AS DAY13, W.DAY14 AS DAY14, W.DAY15 AS DAY15, W.DAY16 AS DAY16, T.INITDATE AS INITDATE
	FROM TIMESHEET T, WORKLOAD W
	WHERE (SELECT YEAR (T.INITDATE) AS INITDATEYEAR) = @year AND
		   W.FK_TIMESHEET = T.ID;
END


/****** 
    PROCEDIMIENTO PARA CONSULTAR TODAS LAS HOJAS DE TIEMPO DE TODOS LOS EMPLEADOS DE LA BASE DE DATOS
    FECHA: 25/06/2019 10:24 AM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GET_ALL_TIMESHEET_BY_EMPLOYEE]
  @employee AS int
AS
BEGIN
  SELECT T.ID AS ID, T.INITDATE AS INITDATE, T.ENDDATE AS ENDDATE, T.STATUS AS STATUS
  FROM TIMESHEET T
  WHERE T.FK_EMPLOYEE = @employee
  ORDER BY INITDATE DESC;
END



/****** 
    PROCEDIMIENTO PARA CONSULTAR UNA HOJA DE TIEMPO DADO SU ID
    FECHA: 18/08/2019 8:41 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GET_TIMESHEET_BY_ID]
  @id AS int
AS
BEGIN
  SELECT T.ID AS ID, T.INITDATE AS INITDATE, T.ENDDATE AS ENDDATE, T.STATUS AS STATUS
  FROM TIMESHEET T
  WHERE T.ID = @id
  ORDER BY INITDATE DESC;
END

/****** 
    PROCEDIMIENTO PARA CREAR UNA HOJA DE TIEMPO A LA BASE DE DATOS
    FECHA: 27/06/2019 11:29 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[CREATE_TIMESHEET]
  @id AS int,
  @initdate AS date,
  @enddate AS date,
  @status AS varchar (50),
  @fk_employee AS int,
  @exitvalue AS int OUTPUT
AS
BEGIN
  INSERT INTO TIMESHEET VALUES(@id, @initdate, @enddate, @status, @fk_employee);
  set @exitvalue = 200;
  RETURN @exitvalue;
END

/****** 
    PROCEDIMIENTO PARA CREAR LA CARGA DE TRABAJO DE UNA HOJA DE TIEMPO EN LA BASE DE DATOS
    FECHA: 27/06/2019 11:57 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[CREATE_WORKLOAD]
  @day1 AS int,
  @day2 AS int,
  @day3 AS int,
  @day4 AS int,
  @day5 AS int,
  @day6 AS int,
  @day7 AS int,
  @day8 AS int,
  @day9 AS int,
  @day10 AS int,
  @day11 AS int,
  @day12 AS int,
  @day13 AS int,
  @day14 AS int,
  @day15 AS int,
  @day16 AS int,
  @fk_timesheet AS int,
  @fk_accountcoursepermit AS varchar (30),
  @exitvalue AS int OUTPUT
AS
BEGIN
	IF ((SELECT COUNT(*) FROM WORKLOAD WHERE FK_ACCOUNTCOURSEPERMIT = @fk_accountcoursepermit AND FK_TIMESHEET = @fk_timesheet) = 0)
		BEGIN  
			INSERT INTO WORKLOAD(DAY1, DAY2, DAY3, DAY4, DAY5, DAY6, DAY7, DAY8, DAY9, DAY10, DAY11, DAY12, DAY13, DAY14, DAY15, DAY16, STATUS, FK_TIMESHEET, FK_ACCOUNTCOURSEPERMIT) VALUES(@day1, @day2, @day3, @day4, @day5, @day6, @day7, @day8, @day9, @day10, @day11, @day12, @day13, @day14, @day15, @day16, 'EN ESPERA', @fk_timesheet, @fk_accountcoursepermit);
			set @exitvalue = 200;
			RETURN @exitvalue;
		END;
	ELSE
		BEGIN
			set @exitvalue = 100;
		    RETURN @exitvalue;
    END;
END

/****** 
		PROCEDIMIENTO PARA MODIFICAR LA CARGA DE TRABAJO DE UN EMPLEADO DE LA BASE DE DATOS
		FECHA: 30/06/2019 04:01 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[UPDATE_WORKLOAD]
  @id AS int,
  @day1 AS int,
  @day2 AS int,
  @day3 AS int,
  @day4 AS int,
  @day5 AS int,
  @day6 AS int,
  @day7 AS int,
  @day8 AS int,
  @day9 AS int,
  @day10 AS int,
  @day11 AS int,
  @day12 AS int,
  @day13 AS int,
  @day14 AS int,
  @day15 AS int,
  @day16 AS int,
  @fk_timesheet AS int,
  @fk_accountcoursepermit AS varchar (30),
  @exitvalue AS int OUTPUT 
AS
BEGIN
  IF ((SELECT COUNT(*) FROM WORKLOAD WHERE ID = @id) = 1)
    BEGIN  
      UPDATE [dbo].[WORKLOAD] SET DAY1 = @day1, DAY2 = @day2, DAY3 = @day3, DAY4 = @day4, DAY5 = @day5, DAY6 = @day6, DAY7 = @day7, DAY8 = @day8, DAY9 = @day9, DAY10 = @day10, DAY11 = @day11, DAY12 = @day12, DAY13 = @day13, DAY14 = @day14, DAY15 = @day15, DAY16 = @day16 , FK_ACCOUNTCOURSEPERMIT = @fk_accountcoursepermit, STATUS = 'EN ESPERA'
      WHERE ID=@id;
      set @exitvalue = 200;
      RETURN @exitvalue;
    END;
  ELSE
    BEGIN
      set @exitvalue = 100;
        RETURN @exitvalue;
    END;
END

/****** 
		PROCEDIMIENTO PARA CONSULTAR LAS CARGAS DE TRABAJO DE TODOS LOS EMPLEADOS DE LA BASE DE DATOS
		FECHA: 01/07/2019 07:34 AM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GET_ALL_WORKLOADS]
  @id AS int
AS
BEGIN
	SELECT W.ID AS ID, W.DAY1 AS DAY1, W.DAY2 AS DAY2, W.DAY3 AS DAY3, W.DAY4 AS DAY4, W.DAY5 AS DAY5, W.DAY6 AS DAY6, W.DAY7 AS DAY7, W.DAY8 AS DAY8, W.DAY9 AS DAY9, W.DAY10 AS DAY10, W.DAY11 AS DAY11, W.DAY12 AS DAY12, W.DAY13 AS DAY13, W.DAY14 AS DAY14, W.DAY15 AS DAY15, W.DAY16 AS DAY16, W.STATUS AS STATUS, ACP.ID AS IDACP, ACP.NAME AS NAME, T.INITDATE AS INITDATE, T.ENDDATE AS ENDDATE
	FROM TIMESHEET T, ACCOUNT_COURSE_PERMIT ACP, WORKLOAD W
	WHERE T.ID = @id AND W.FK_ACCOUNTCOURSEPERMIT = ACP.ID AND W.FK_TIMESHEET = T.ID;
END

/****** 
    PROCEDIMIENTO PARA ELIMINAR UNA CARGA DE TRABAJO DE LA BASE DE DATOS
    FECHA: 30/06/2019 4:23 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[DELETE_WORKLOAD]
  @id AS int
AS
BEGIN
  DELETE FROM [dbo].[WORKLOAD] WHERE ID = @id;
END

/****** 
		PROCEDIMIENTO PARA CONSULTAR TODOS LOS CARGOS DE TODOS LOS EMPLEADOS DE LA BASE DE DATOS
		FECHA: 02/07/2019 5:19 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GET_ALL_POSITIONS]
AS
BEGIN
	SELECT P.ID AS POSITIONID, P.NAME AS POSITIONNAME
	FROM POSITION P
END

/****** 
		PROCEDIMIENTO PARA CONSULTAR TODAS LAS UNIDADES ORGANIZACIONALES DE LA BASE DE DATOS
		FECHA: 02/07/2019 5:30 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GET_ALL_ORGANIZATIONAL_UNITS]
AS
BEGIN
	SELECT OU.ID AS OUID, OU.NAME AS OUNAME, OU.FK_EMPLOYEE AS EMPLOYEEID
	FROM ORGANIZATIONAL_UNIT OU
END

/****** 
    PROCEDIMIENTO PARA MODIFICAR EL SUPERVISOR DE UNA UNIDAD ORGANIZACIONAL
    FECHA: 30/06/2019 04:01 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[UPDATE_SUPERVISOR_OF_ORGANIZATIONAL_UNIT]
  @idou AS int,
  @id AS int,
  @exitvalue AS int OUTPUT 
AS
BEGIN
  UPDATE [dbo].[ORGANIZATIONAL_UNIT] SET FK_EMPLOYEE = @id
  WHERE ID = @idou;
  set @exitvalue = 200;
  RETURN @exitvalue;
END

/****** 
    PROCEDIMIENTO PARA MODIFICAR EL SUPERVISOR DE UNA UNIDAD ORGANIZACIONAL
    FECHA: 30/06/2019 04:01 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[REMOVE_SUPERVISOR_OF_ORGANIZATIONAL_UNIT]
  @idou AS int,
  @id AS int,
  @exitvalue AS int OUTPUT 
AS
BEGIN
  UPDATE [dbo].[ORGANIZATIONAL_UNIT] SET FK_EMPLOYEE = NULL
  WHERE ID = @idou;
  set @exitvalue = 200;
  RETURN @exitvalue;
END

/****** 
    PROCEDIMIENTO PARA CONSULTAR CUALES ACP PUEDE ACCEDER UNA OU
    FECHA: 21/08/2019 5:30 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GET_ALL_ACP_PER_OU]
  @unit AS int,
  @today AS date
AS
BEGIN
  SELECT ACP.ID AS IDACP, ACP.NAME AS NAME
  FROM ORGANIZATIONAL_UNIT OU, COST_CENTER CC, ACCOUNT_COURSE_PERMIT ACP
  WHERE CC.FK_ACCOUNTCOURSEPERMIT = ACP.ID AND CC.FK_ORGANIZATIONALUNIT = OU.ID AND OU.ID = @unit AND ACP.STATUS = 1 AND @today >= ACP.INITDATE AND @today <= ACP.ENDDATE; 
END

/****** 
    PROCEDIMIENTO PARA CONSULTAR FECHA DE INICIO Y FIN DE UN TIMESHEET
    FECHA: 22/08/2019 12:56 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GET_TIMESHEET_DATES]

  @id AS int
AS
BEGIN
  SELECT T.INITDATE AS INITDATE, T.ENDDATE AS ENDDATE
  FROM TIMESHEET T
  WHERE T.ID = @id; 
END

/****** 
    PROCEDIMIENTO PARA ACTUALIZAR EL ESTATUS LAS HOJAS DE TIEMPO
    FECHA: 25/08/2019 04:44 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[UPDATE_TIMESHEET_STATUS]
  @id AS int,
  @status AS varchar (50),
  @exitvalue AS int OUTPUT 
AS
BEGIN
  IF ((SELECT COUNT(*) FROM TIMESHEET WHERE ID = @id) = 1)
    BEGIN  
      UPDATE [dbo].[TIMESHEET] SET STATUS = @status
      WHERE ID = @id;
      set @exitvalue = 200;
      RETURN @exitvalue;
    END;
  ELSE
    BEGIN
      set @exitvalue = 100;
      RETURN @exitvalue;
    END;
END

/****** 
    PROCEDIMIENTO PARA CONSULTAR LAS CUENTAS/CURSOS/PERMISOS QUE MANEJA UN EMPLEADO
    FECHA: 25/08/2019 9:08 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GET_ALL_ACP_PER_EMPLOYEE]
  @fk_employee AS int
AS
BEGIN
  SELECT *
  FROM ACCOUNT_COURSE_PERMIT
  WHERE FK_EMPLOYEE = @fk_employee;
END

/****** 
    PROCEDIMIENTO PARA CONSULTAR LAS CARGAS DE TRABAJO DE UNA CUENTA/CURSO/PERMISO
    FECHA: 26/08/2019 12:46 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GET_ALL_WORKLOADS_BY_ACP]
  @id AS varchar(30),
  @initdate AS date,
  @enddate AS date
AS
BEGIN
  SELECT W.ID AS ID, W.STATUS AS STATUS, W.DAY1 AS DAY1, W.DAY2 AS DAY2, W.DAY3 AS DAY3, W.DAY4 AS DAY4, W.DAY5 AS DAY5, W.DAY6 AS DAY6, W.DAY7 AS DAY7, W.DAY8 AS DAY8, W.DAY9 AS DAY9, W.DAY10 AS DAY10, W.DAY11 AS DAY11, W.DAY12 AS DAY12, W.DAY13 AS DAY13, W.DAY14 AS DAY14, W.DAY15 AS DAY15, W.DAY16 AS DAY16, E.ID AS EID, E.FIRSTNAME AS EFIRSTNAME, E.LASTNAME AS ELASTNAME, T.ID AS TID
  FROM ACCOUNT_COURSE_PERMIT ACP, WORKLOAD W, TIMESHEET T, EMPLOYEE E
  WHERE ACP.ID = @id AND W.FK_ACCOUNTCOURSEPERMIT = ACP.ID AND W.FK_TIMESHEET = T.ID AND T.FK_EMPLOYEE = E.ID AND W.STATUS = 'EN ESPERA' AND T.STATUS = 'ENTREGADA' AND T.INITDATE = @initdate AND T.ENDDATE = @enddate;
END

/****** 
    PROCEDIMIENTO PARA MODIFICAR EL STATUS DE LA CARGA DE TRABAJO DE UN EMPLEADO DE LA BASE DE DATOS
    FECHA: 26/08/2019 12:52 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[UPDATE_STATUS_WORKLOAD]
  @id AS int,
  @status AS varchar(50),
  @exitvalue AS int OUTPUT 
AS
BEGIN
  IF ((SELECT COUNT(*) FROM WORKLOAD WHERE ID = @id) = 1)
    BEGIN  
      UPDATE [dbo].[WORKLOAD] SET STATUS = @status
      WHERE ID=@id;
      set @exitvalue = 200;
      RETURN @exitvalue;
    END;
  ELSE
    BEGIN
      set @exitvalue = 100;
        RETURN @exitvalue;
    END;
END

/****** 
    PROCEDIMIENTO PARA CONSULTAR LOS EMPLEADOS QUE SUPERVISO
    FECHA: 28/08/2019 12:09 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GET_ALL_SUPERVISED_EMPLOYEES]
  @id AS int
AS
BEGIN
  SELECT E.ID AS EID, E.FIRSTNAME AS EFIRSTNAME, E.LASTNAME AS ELASTNAME, T.ID AS TID, T.INITDATE AS TINITDATE, T.ENDDATE AS TENDDATE, T.STATUS AS STATUS
  FROM ASSIGNMENT A, ORGANIZATIONAL_UNIT OU, TIMESHEET T, EMPLOYEE E, EMPLOYEE ES
  WHERE OU.ID = A.FK_ORGANIZATIONALUNIT AND E.ID = A.FK_EMPLOYEE AND ES.ID = @id AND OU.FK_EMPLOYEE = ES.ID AND T.FK_EMPLOYEE = E.ID AND T.STATUS <> 'ABIERTA'
END

/****** 
    PROCEDIMIENTO PARA CONSULTAR LAS HOJAS DE TIEMPO DE LOS EMPLEADOS
    FECHA: 28/08/2019 12:53 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GET_ALL_TIMESHEETS_HRM]
  @year AS int
AS
BEGIN
  SELECT E.ID AS EID, E.FIRSTNAME AS EFIRSTNAME, E.LASTNAME AS ELASTNAME, E.EMAIL AS EEMAIL, T.ID AS TID, T.INITDATE AS TINITDATE, T.ENDDATE AS TENDDATE, T.STATUS AS STATUS
  FROM TIMESHEET T, EMPLOYEE E
  WHERE (SELECT YEAR(T.INITDATE) AS INITDATEYEAR) = @year AND T.FK_EMPLOYEE = E.ID AND T.STATUS <> 'ENTREGADA' AND T.STATUS <> 'REPROBADA POR SUPERVISOR' AND T.STATUS <> 'ABIERTA'
END

/****** 
    PROCEDIMIENTO PARA CONSULTAR LA UNIDAD QUE SUPERVISA UN EMPLEADO
    FECHA: 28/08/2019 12:56 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GET_MY_ORGANIZATIONAL_UNITS]
  @id AS int
AS
BEGIN
  SELECT OU.ID AS OUID, OU.NAME AS OUNAME, OU.FK_EMPLOYEE AS IDEMPLOYEE
  FROM ORGANIZATIONAL_UNIT OU, EMPLOYEE E
  WHERE OU.FK_EMPLOYEE = E.ID AND E.ID = @id
END