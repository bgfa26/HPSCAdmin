 /****** 
		PROCEDIMIENTO PARA AGREGAR EMPLEADOS A LA BASE DE DATOS (NO POSEEN NINGUN ROL) 
		FECHA: 20/06/2019 11:00 AM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[CREATE_EMPLOYEE]
  @id AS int,
  @workerid AS varchar (20),
  @firstname AS varchar (50),
  @lastname AS varchar (50),
  @email AS varchar (120),
  @password AS varchar (50),
  @exitvalue AS int OUTPUT
AS
BEGIN
  IF ((SELECT COUNT(*) FROM EMPLOYEE WHERE ID = @id) = 0)
    IF ((SELECT COUNT(*) FROM EMPLOYEE WHERE WORKERID = @workerid) = 0)
      IF ((SELECT COUNT(*) FROM EMPLOYEE WHERE EMAIL = @email) = 0)
        BEGIN
          INSERT INTO EMPLOYEE VALUES(@id, @workerid, @firstname, @lastname, @email, @password, 1);
          INSERT INTO ASSIGNMENT(FK_POSITION, FK_ORGANIZATIONALUNIT, FK_EMPLOYEE) VALUES (NULL, NULL, @id);
          set @exitvalue = 200;
          RETURN @exitvalue;
        END;
      ELSE
        BEGIN
          set @exitvalue = 103;
          RETURN @exitvalue;
        END;
    ELSE
      BEGIN
        set @exitvalue = 102;
        RETURN @exitvalue;  
      END;
  ELSE
    BEGIN
      set @exitvalue = 101;
      RETURN @exitvalue; 
    END;
END


/****** 
    PROCEDIMIENTO PARA CONSULTAR EMPLEADOS MEDIANTE UN CORREO
    FECHA: 24/06/2019 12:39 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[CONSULT_EMPLOYEE_EMAIL]
  @email AS varchar(350)
AS
BEGIN
  SELECT E.ID AS ID, E.WORKERID AS WORKERID, E.FIRSTNAME AS FIRSTNAME, E.LASTNAME AS LASTNAME, E.EMAIL AS EMAIL, E.PASSWORD AS PASSWORD, E.STATUS AS STATUS, P.ID AS POSITIONID, P.NAME AS POSITIONNAME, OU.ID OUID, OU.NAME OUNAME
  FROM EMPLOYEE E, ASSIGNMENT A, POSITION P, ORGANIZATIONAL_UNIT OU 
  WHERE E.EMAIL = @email AND A.FK_EMPLOYEE = E.ID AND A.FK_POSITION = P.ID AND A.FK_ORGANIZATIONALUNIT = OU.ID;
END

/****** 
		PROCEDIMIENTO PARA CAMBIAR EL PWD DE UN EMPLEADO DE LA BASE DE DATOS POR CORREO
		FECHA: 25/06/2019 12:03 AM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[CHANGE_PASSWORD]
  @email AS varchar(120),
  @password AS varchar(50),
  @exitvalue AS int OUTPUT
AS
BEGIN
  UPDATE [dbo].[EMPLOYEE] SET [PASSWORD] = @password WHERE [EMAIL] = @email;
  set @exitvalue = 200;
  RETURN @exitvalue;
END

/****** 
		PROCEDIMIENTO PARA CONSULTAR TODOS LOS EMPLEADOS DE LA BASE DE DATOS
		FECHA: 25/06/2019 10:24 AM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GET_ALL_EMPLOYEES]
AS
BEGIN
	SELECT E.ID AS ID, E.WORKERID AS WORKERID, E.FIRSTNAME AS FIRSTNAME, E.LASTNAME AS LASTNAME, E.EMAIL AS EMAIL, E.PASSWORD AS PASSWORD, P.ID AS ID, P.NAME POSITIONNAME, OU.ID AS OUID, OU.NAME OUNAME 
	FROM EMPLOYEE E, ASSIGNMENT A, POSITION P, ORGANIZATIONAL_UNIT OU
	WHERE A.FK_EMPLOYEE = E.ID AND A.FK_POSITION = P.ID AND A.FK_ORGANIZATIONALUNIT = OU.ID;
END

/****** 
		PROCEDIMIENTO PARA ASIGNAR CARGO Y UNIDAD ORGANIZACIONAL A UN EMPLEADO DE LA BASE DE DATOS
		FECHA: 25/06/2019 10:30 AM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[UPDATE_POSITION_EMPLOYEE]
  @id AS int,
  @idposition AS int,
  @idou AS int,
  @exitvalue AS int OUTPUT
AS
BEGIN
	IF ((SELECT COUNT(*) FROM EMPLOYEE WHERE ID = @id) = 1)
    BEGIN
  		UPDATE [dbo].[ASSIGNMENT] SET FK_POSITION = @idposition, FK_ORGANIZATIONALUNIT = @idou WHERE FK_EMPLOYEE = @id;
      set @exitvalue = 200;
  		RETURN @exitvalue;
    END;
	ELSE
    BEGIN
      set @exitvalue = 100;
      RETURN @exitvalue;
    END;
END

/****** 
    PROCEDIMIENTO PARA ELIMINAR UN EMPLEADO DE LA BASE DE DATOS
    FECHA: 25/06/2019 5:15 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[DELETE_EMPLOYEE]
  @id AS varchar(120)
AS
BEGIN
  UPDATE [dbo].[EMPLOYEE] SET [STATUS] = 0 WHERE [ID] = @id;
END

/****** 
    PROCEDIMIENTO PARA VALIDAR EMPLEADOS DE LA BASE DE DATOS
    FECHA: 25/06/2019 10:45 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[VALIDATE_ID_EMAIL]
  @id AS int,
  @workerid AS varchar (20),
  @email AS varchar (120),
  @exitvalue AS int OUTPUT
AS
BEGIN
  IF ((SELECT COUNT(*) FROM EMPLOYEE WHERE ID = @id) = 0)
    IF ((SELECT COUNT(*) FROM EMPLOYEE WHERE WORKERID = @workerid) = 0)
      IF ((SELECT COUNT(*) FROM EMPLOYEE WHERE EMAIL = @email) = 0)
        BEGIN
          set @exitvalue = 200;
          RETURN @exitvalue;
        END;
      ELSE
        BEGIN
          set @exitvalue = 103;
          RETURN @exitvalue;
        END;
    ELSE
      BEGIN
        set @exitvalue = 102;
        RETURN @exitvalue;  
      END;
  ELSE
    BEGIN
      set @exitvalue = 101;
      RETURN @exitvalue; 
    END;
END

/****** 
    PROCEDIMIENTO PARA AGREGAR CURSOS/CUENTAS/PERMISOS A LA BASE DE DATOS
    FECHA: 25/06/2019 06:29 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[CREATE_ACCOUNT_COURSE_PERMIT]
  @id AS varchar(30),
  @name AS varchar (100),
  @type AS varchar (50),
  @initdate AS date,
  @enddate AS date,
  @fk_employee AS int,
  @exitvalue AS int OUTPUT
AS
BEGIN
  IF ((SELECT COUNT(*) FROM ACCOUNT_COURSE_PERMIT WHERE ID = @id) = 0)
    BEGIN
      INSERT INTO ACCOUNT_COURSE_PERMIT VALUES(@id, @name, @type, @initdate, @enddate, @fk_employee);
      set @exitvalue = 200;
      RETURN @exitvalue;
    END;
  ELSE
    BEGIN
      set @exitvalue = 100;
      RETURN @exitvalue;  
    END;
END

/****** 
    PROCEDIMIENTO PARA AGREGAR UN CENTRO DE COSTO A LA BASE DE DATOS
    FECHA: 26/06/2019 04:19 PM
******/
USE [MTGROUPDATABASE]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[CREATE_COST_CENTER]
  @fk_ou AS int,
  @fk_acp AS varchar (30),
  @exitvalue AS int OUTPUT
AS
BEGIN
  IF ((SELECT COUNT(*) FROM COST_CENTER WHERE (FK_ORGANIZATIONALUNIT = @fk_ou) AND (FK_ACCOUNTCOURSEPERMIT = @fk_acp)) = 0)
    BEGIN
      INSERT INTO COST_CENTER(FK_ORGANIZATIONALUNIT, FK_ACCOUNTCOURSEPERMIT) VALUES(@fk_ou, @fk_acp);
      set @exitvalue = 200;
      RETURN @exitvalue;
    END;
  ELSE
    BEGIN
      set @exitvalue = 100;
      RETURN @exitvalue;  
    END;  
END